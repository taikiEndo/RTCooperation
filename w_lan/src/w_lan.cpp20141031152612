// -*- C++ -*-
/*!
 * @file  w_lan.cpp
 * @brief ModuleDescription
 * @date $Date$
 *
 * $Id$
 */

#include "w_lan.h"
#include <string.h>
#include <sys/ioctl.h>

#include <iostream>
#include <vector>
#include <cstring>
#include <cstdlib>
#include <climits>
#include <ext/stdio_filebuf.h>


#define COMMAND "iwlist wlan0 scan"

using namespace std;

 class APlist
 {
   public:
      unsigned char mac[6];
      string essid;
      int signal_lv;
 };

  void getMac(APlist* ap,int index,string str){
	char* e;
	long preMac;
	if(index >=0 && index < 6){
		preMac = strtol(str.c_str(), &e, 16);
		if((preMac != LONG_MAX) && (preMac != LONG_MIN)){
			ap->mac[index] = (unsigned char)preMac;
		}else{
			ap->mac[index] = 0;
		}
	}
  };


// Module specification
// <rtc-template block="module_spec">
static const char* w_lan_spec[] =
  {
    "implementation_id", "w_lan",
    "type_name",         "w_lan",
    "description",       "ModuleDescription",
    "version",           "1.0.0",
    "vendor",            "DOTS",
    "category",          "Category",
    "activity_type",     "PERIODIC",
    "kind",              "DataFlowComponent",
    "max_instance",      "1",
    "language",          "C++",
    "lang_type",         "compile",
    ""
  };
// </rtc-template>

/*!
 * @brief constructor
 * @param manager Maneger Object
 */
w_lan::w_lan(RTC::Manager* manager)
    // <rtc-template block="initializer">
  : RTC::DataFlowComponentBase(manager),
    m_wl_infOut("wl_inf", m_wl_inf)

    // </rtc-template>
{
}

/*!
 * @brief destructor
 */
w_lan::~w_lan()
{
}



RTC::ReturnCode_t w_lan::onInitialize()
{
  // Registration: InPort/OutPort/Service
  // <rtc-template block="registration">
  // Set InPort buffers
  
  // Set OutPort buffer
  addOutPort("wl_inf", m_wl_infOut);
  
  // Set service provider to Ports
  
  // Set service consumers to Ports
  
  // Set CORBA Service Ports
  
  // </rtc-template>

  // <rtc-template block="bind_config">
  // </rtc-template>
  
  return RTC::RTC_OK;
}

/*
RTC::ReturnCode_t w_lan::onFinalize()
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t w_lan::onStartup(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t w_lan::onShutdown(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/


RTC::ReturnCode_t w_lan::onActivated(RTC::UniqueId ec_id)
{

  return RTC::RTC_OK;
}


RTC::ReturnCode_t w_lan::onDeactivated(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}



RTC::ReturnCode_t w_lan::onExecute(RTC::UniqueId ec_id)
{
  string buf,buf2,buf3;
  vector<APlist*> Cells;
  string::size_type ind,ind2,ind3;
  int iMac;

  FILE *p_file;
 
  p_file=popen(COMMAND,"r");

  __gnu_cxx::stdio_filebuf<char> *p_fb = new __gnu_cxx::stdio_filebuf<char>(p_file, std::ios_base::in);
  std::istream input(static_cast<std::streambuf *>(p_fb));

  while(getline(input, buf)){

    //find "Cell"
    ind = buf.find("Cell",0);
    if(ind != string::npos){   
      APlist* pCell = new APlist;
      Cells.push_back(pCell);
    }
    if(Cells.size() > 0){     
      ind = buf.find("Address",0);
      if(ind != string::npos){

		buf2 = buf.substr(ind+9);
		ind2 = 0;
		iMac = 0;
		while((ind3 = buf2.find(":",ind2)) != string::npos && iMac < 5){

			buf3 = buf2.substr(ind2,ind3-ind2);

			getMac(Cells[Cells.size()-1],iMac,buf3);
			iMac++;
			ind2 = ind3+1;
		}
		buf3 = buf2.substr(ind2,buf2.size()-ind2);
		getMac(Cells[Cells.size()-1],iMac,buf3);
	}

	ind = buf.find("ESSID",0);
	if(ind != string::npos){

		buf2 = buf.substr(ind+7,buf.length()-(ind+7+1));
		Cells[Cells.size()-1]->essid = buf2;
	}


	ind = buf.find("Signal level",0);
	if(ind != string::npos){
		ind2 = buf.find(" ",ind+13);
		buf2 = buf.substr(ind+13,ind2-(ind+13));

		Cells[Cells.size()-1]->signal_lv = atoi(buf2.c_str());

	}

    }

  }
  for(unsigned int i=0; i<Cells.size();i++){
    cout << "### " << i << endl;
    cout << "	MAC Address  = ";
    cout << std::hex;
    for(int m =0; m<6; m++){
      if((int)(Cells[i]->mac[m]) < 0x10){
        cout << 0;
      }
      cout <<  (int)(Cells[i]->mac[m]);
      if(m < 5){
        cout << ":";
      }
    }
    cout << std::dec << endl;

    cout << "	ESSID       = " << Cells[i]->essid << endl;
    cout << "	Signal level = " << Cells[i]->signal_lv << " dBm" << endl;
  }
  Cells.clear();

  usleep(500000);
  

  pclose(p_file);

  return RTC::RTC_OK;
}

/*
RTC::ReturnCode_t w_lan::onAborting(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t w_lan::onError(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t w_lan::onReset(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t w_lan::onStateUpdate(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t w_lan::onRateChanged(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/



extern "C"
{
 
  void w_lanInit(RTC::Manager* manager)
  {
    coil::Properties profile(w_lan_spec);
    manager->registerFactory(profile,
                             RTC::Create<w_lan>,
                             RTC::Delete<w_lan>);
  }
  
};


